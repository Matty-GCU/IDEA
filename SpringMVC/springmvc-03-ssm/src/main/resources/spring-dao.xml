<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--
    Activates replacement of ${...} placeholders by registering a
	PropertySourcesPlaceholderConfigurer within the application context. Properties will
	be resolved against the specified properties file or Properties object, so called
	"local properties", if any, and against the Spring Environment's current set of
	PropertySources.
    -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 配置数据源，这里使用c3p0数据库连接池 -->
    <!-- 代替原来在MyBatis配置文件中配置数据源 -->
    <bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
    </bean>

    <!-- 配置SqlSessionFactoryBean -->
    <!-- 代替原来在MyBatis代码中通过SqlSessionFactoryBuilder实例的build方法获得SQLSessionFactory实例 -->
    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!-- 配置SqlSessionTemplate -->
    <!-- 代替原来在MyBatis代码中通过SQLSessionFactory实例的openSession方法获得SQLSession实例 -->
    <!-- （虽然下面的MapperFactoryBean和MapperFactoryBean都可以注入SQLSessionTemplate依赖，但它们也可以直接注入SqlSessionFactoryBean依赖，所以不一定要配置这个Bean） -->
<!--    <bean id="mySqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
<!--        <constructor-arg ref="mySqlSessionFactory"/>-->
<!--    </bean>-->

    <!-- 配置MapperFactoryBean，这个工厂负责生产BookMapper的Bean实例 -->
    <!-- 代替原来在MyBatis配置文件中注册映射器（<mappers><mapper class="..."/></mappers>方式）并在MyBatis代码中通过SqlSession实例的getMapper方法获取XXXMapper实例 -->
<!--    <bean id="myBookMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        <property name="mapperInterface" value="org.example.dao.BookMapper"/>-->
<!--        <property name="sqlSessionFactory" ref="mySqlSessionFactory"/>-->
<!--    </bean>-->

    <!-- 配置MapperScannerConfigurer，它是上面的MapperFactoryBean的增强版 -->
    <!-- 代替原来在MyBatis配置文件中注册映射器（<mappers><package name="..."/></mappers>方式）并在MyBatis代码中通过SqlSession实例的getMapper方法获取XXXMapper实例 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.example.dao"/>
        <!-- 注意这里指定的是"sqlSessionFactoryBean"的"Name"，所以应该用value属性 -->
        <property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory"/>
    </bean>
</beans>